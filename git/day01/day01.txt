git -- 형상(버전) 관리 도구

1.0.0 배포 ----> 치명적인 버그 발생 가능성 ---> 롤백 ---> 히스토리 저장소

ver 1.0.0 (개발자 마음) 

    ---
    major (사용성에 변화가 생길정도로 큰 변화)
        ---
        minor (특정 기능 추가, 패치가 필요, 재설치 필수 )
            ---
            patch (일부 기능 추가, 사용자 선택 (새로운기능을 사용하시려면 업데이트해주세요.), 간단한 버그 수정 및 개선)

버전에 대한 단순한 약속


코드를 버전에 맞게 관리 + 중앙 저장소 역할

------------------------------------------------



1. git download
https://git-scm.com/downloads/win

-- 로컬 (내 컴퓨터) 저장소 생성 --

2. 관리할 코드나 파일을 지정할 폴더 경로 맞추기 (지정할 폴더 안에 생성해야됨.)
cd 상대경로, 절대경로
    ./html/day02
    .. (상위 폴더 이동)

3. 로컬 저장소 생성 (git init)
4. 저장할 파일 지정 (git add 파일명)
                    (git add .) -> 변경 사항이 있는 모든 파일 지정
                    (git reset 파일명) -> 지정 취소
                    (git reset .) -> 지정된 모든파일 지정 취소

5. git commit -m "제목" -m "본문" -m "각주"

작은 커밋 작은 PR -> 히스토리 관리가 쉬워지고 코드 리뷰나 협업이 수월

git commnit convention(커밋할때 메세지 정의)
- 팀 내 자율

--정의 순서

feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 작성 및 수정
style: 코드 스타일 체인지
refactor: 코드 리펙터링 (나오는 결과가 똑같은데 소스변경해서 방식을 바꾸는걸 리펙터링)
test: 테스트 코드 추가 및 수정

.. 새로운 메세지 컨벤션을 추가하는건 팀 협의

--------------------------------------------------------------

branch (나뭇가지)

main (default branch) ---- (release)
dev  (dev branch)     ---- (merge)
            ----------(border branch)
            ----------(my-page branch)
            ----------(page-3 branch)

git branch 브랜치명 (브랜치 생성)
git branch (브랜치 목록 확인) * 표시 되어있는게 바라보는곳, vscode 왼쪽하단에도 써있다.
git checkout 브랜치명 (브랜치 이동)

git checkout -b 브랜치명 (브랜치 생성 후 이동, 최초 생성)
git branch -D 브랜치명 (브랜치 삭제) 그냥 d 해도되는데 대문자 D는 강제삭제 

** 브랜치 생성할 때 주의점: 생성할 당시에 내가 위치한 브랜치 기준 복사본 생성 **
ex) dev -> feat/my-page -> branch 생성 -> (feat/my-page) (X)
                        -> dev -> branch생성 -> (dev) (O)

                        
git log
--> 지금까지 올린 git commit log 확인 가능
--> q 누르면 종료

GitHub 회원가입 
- github.com

원격 저장소와 로컬 저장소 연결 
- git remote add [원격저장소명(origin을 많이씀)] "깃허브 레퍼지토리(저장소) 주소"
ex) git remote add origin https://github.com/jihoon120/test-1.git

add 잘되었는지 확인하려면 git remote (목록) || git remote -v (목록 + url)

- git remote remove 원격저장소명
ex) git remote remove origin



----------------------------------------------------------------------------

로컬 저장소 저장 내역 -> 원격 저장소에 밀어 넣는다 (push)
git push origin 브랜치명 


403 오류나면 pobidden 오류 (인증안해서 생기는 오류)

원격 저장소를 터미널에 인증

git config --global user.name 깃허브 닉네임
git config --global user.email 깃허브 로그인 이메일
git config --list -> 엔터를 꾹 누르면 user.name이 등록 됐는지 확인 가능. q누르면 종료.


---------------------------------------------------------------------
1. 버전 관리를 할 폴더 선택. 
-> 다른 폴더나 다른 프로젝트가 함꼐 버전 관리되면 안되니깐, 스코프 지정.
-> cd, cd ..
-> 터미널 확인해서 경로 맞는지 확인
* 이 폴더를 git에 관리할게!

2. 폴더에서 로컬 저장소 생성
-> 로컬 내컴퓨터에 저장, 히스토리를 생성
-> 히스토리를 왜 생성해야하나요 -> 나중에 치명적인 오류나면 롤백
-> git init
* 이 폴더를 git에 관리하게 해줘!

3. 히스토리를 쌓을 파일 선택
-> 내가 히스토리에 쌓고 싶지 않은 파일이 있을 수 있으니까.
-> git add 파일명
-> git add .
* 이 파일을 저장할 준비가 됐어!

4. 내 로컬 환경에 히스토리를 기록 (저장)
-> 깃은 버전이 하나씩 생성된다.
-> git commit -m '커밋메세지'
* 지금 상태를 저장해줘 ! 

5. 변경 -> add -> commit만 하면 히스토리 끝.
-> 로컬 환경에서의 버전관리 끝.

---여기까지 순서이고 이후는 필요에 따라서 해야하는 것 ---


6. branch를 생성 -> 복사본이 필요하다!
-> default branch (서비스 중인 브랜치)에 테스타가 안된 기능이 추가 -> 불안정적
-> 그러므로 dev branch 생성  
(git branch dev)
-> *** 브랜치를 생성한 시점에 위치한 브랜치의 복사형태로 생성
-> 병렬적 개발을 위해 브랜치를 생성할 수도 있다.
-> 동일한 시작점에서 각 개발자(협업 관계)들이 새로운 브랜치(복사본)을 생성해서 작업후 
-> 나중ㅇ에 dev 브랜치로 합침 -> 준비가 끝나면 default branch로 이동해서 release(배포)

7. branch 이동
-> git branch는 생성했으면 이동해야된다.
-> git checkout dev

-----------------------------------------------------------

8. 만약에, 로컬저장소와 원격저장소가 연결이 안되어있다면 연결.
git remote add 원격저장소명 원격저장소주소

----------------------------------------------------------
 
9. 만약에 내 로컬 환경에 git이 인증되어있지 않다면 계정정보등록.

git config --global user.name 깃허브 로그인 이름
git config --global user.email 깃허브 로그인 이메일
git config --list 목록 확인 가능

----------------------------------------------------------

10. 로컬 저장소에 있는 파일을 원격 저장소로 전송.

git push 원격저장소명 원격브랜치명

주의사항. 
- 로컬 브랜치와 원격 브랜치명이 같아야함.
- 원격 저장소 브랜치는 항상 최신화 되어있어야함


permission 오류
1. 한컴퓨터에 깃 허브 계정 하나만 가능한데 2개 등록 안됨.
2. 내 repository에 push를 할 때 자격증명에 있는 계정이 권한이 있는지 확인해. 

윈도우 자격 증명 관리 -> windows 자격 증명 -> github.com 제거,  sourcetree 제거

dev -> main (x)
dev -> dev (o)

11. 브랜치 생성 시점에 새로운 커밋 내역이 생겼으므로 원격 저장소와 로컬 저장소 동기화

git pull 원격저장소면 원격저장소브랜치명
ex) git pull origin main

에러 뜰 경우)
fatal: refusing merge unrelated histories 
전혀관계없는 히스토리 병합에 혼란이온다.

깃허브에서 저장소 생성할 때 README.md 파일을 함께 생성한 경우!

동일한 시점에서 시작해야되는데
로컬에는 main, 저장소에는 readme.md 로 시작해서 전혀다르니깐 다시한번 확인해보라는 메세지.

git pull origin main --allow-unrelated-histories   (관계없는것 허용)
git pull origin main --rebase 
(rebase는 원격 저장소의 변경사항을 먼저 가져오고(fetch), 내 로컬 브랜치의 변경 사항을 그 위에 재적용(replay) 해서 커밋 히스토리를 더 깔끔하게 유지해줌 
하지만 협업중이라면 리베이스가 히스토리를 바꾸기 떄문에 주의가 필요해( 공유된 브랜치에 특히))

pull 끝나고 : + q + enter 누르면 나가진다.

--------------------------------------------------------------------------------------

