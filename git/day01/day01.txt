git -- 형상(버전) 관리 도구

1.0.0 배포 ----> 치명적인 버그 발생 가능성 ---> 롤백 ---> 히스토리 저장소

ver 1.0.0 (개발자 마음) 

    ---
    major (사용성에 변화가 생길정도로 큰 변화)
        ---
        minor (특정 기능 추가, 패치가 필요, 재설치 필수 )
            ---
            patch (일부 기능 추가, 사용자 선택 (새로운기능을 사용하시려면 업데이트해주세요.), 간단한 버그 수정 및 개선)

버전에 대한 단순한 약속


코드를 버전에 맞게 관리 + 중앙 저장소 역할

------------------------------------------------



1. git download
https://git-scm.com/downloads/win

-- 로컬 (내 컴퓨터) 저장소 생성 --

2. 관리할 코드나 파일을 지정할 폴더 경로 맞추기 (지정할 폴더 안에 생성해야됨.)
cd 상대경로, 절대경로
    ./html/day02
    .. (상위 폴더 이동)

3. 로컬 저장소 생성 (git init)
4. 저장할 파일 지정 (git add 파일명)
                    (git add .) -> 변경 사항이 있는 모든 파일 지정
                    (git reset 파일명) -> 지정 취소
                    (git reset .) -> 지정된 모든파일 지정 취소

5. git commit -m "제목" -m "본문" -m "각주"

작은 커밋 -> 히스토리 관리가 쉬워지고 코드 리뷰나 협업이 수월

git commnit convention(커밋할때 메세지 정의)
- 팀 내 자율

--정의 순서

feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 작성 및 수정
style: 코드 스타일 체인지
refactor: 코드 리펙터링 (나오는 결과가 똑같은데 소스변경해서 방식을 바꾸는걸 리펙터링)
test: 테스트 코드 추가 및 수정

.. 새로운 메세지 컨벤션을 추가하는건 팀 협의

--------------------------------------------------------------

branch (나뭇가지)

main (default branch) ---- (release)
dev  (dev branch)     ---- (merge)
            ----------(border branch)
            ----------(my-page branch)
            ----------(page-3 branch)

git branch 브랜치명 (브랜치 생성)
git branch (브랜치 목록 확인) * 표시 되어있는게 바라보는곳, vscode 왼쪽하단에도 써있다.
git checkout 브랜치명 (브랜치 이동)

git checkout -b 브랜치명 (브랜치 생성 후 이동, 최초 생성)
git branch -D 브랜치명 (브랜치 삭제) 그냥 d 해도되는데 대문자 D는 강제삭제 

** 브랜치 생성할 때 주의점: 생성할 당시에 내가 위치한 브랜치 기준 복사본 생성 **
ex) dev -> feat/my-page -> branch 생성 -> (feat/my-page) (X)
                        -> dev -> branch생성 -> (dev) (O)

                        
git log
--> 지금까지 올린 git commit log 확인 가능
--> q 누르면 종료

